(window.webpackJsonp=window.webpackJsonp||[]).push([[379],{1394:function(t,a,v){t.exports=v.p+"assets/img/22.56c12282.jpg"},3157:function(t,a,v){"use strict";v.r(a);var r=v(2),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"面试题汇总"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面试题汇总"}},[t._v("#")]),t._v(" 面试题汇总")]),t._v(" "),r("h3",{attrs:{id:"谈谈你对抽象语法树的理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对抽象语法树的理解"}},[t._v("#")]),t._v(" 谈谈你对抽象语法树的理解")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("是什么？")]),t._v(" "),r("ul",[r("li",[t._v("抽象语法树：就是用来描述代码语句的结构，比如说 var a = 10, 通过一个属性来描述它是声明语句，声明的关键字是 var，变量是a，然后有个赋值语句，通过对象或数组来形成一个树形结构。")]),t._v(" "),r("li",[t._v("通过"),r("code",[t._v("JavaScript Parser")]),t._v("把代码转化为一颗抽象语法树（AST）")]),t._v(" "),r("li",[t._v("通过操纵这颗树，我们可以精准的定位到声明语句、赋值语句、运算语句等等，实现对代码的分析、优化、变更等操作")])])]),t._v(" "),r("li",[r("p",[t._v("能干什么，干的怎么样？")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("优化变更代码，改变代码结构使达到想要的结构")])]),t._v(" "),r("ul",[r("li",[t._v("代码打包工具 webpack、rollup 等等")]),t._v(" "),r("li",[t._v("CommonJS、AMD、CMD、UMD 等代码规范之间的转化")]),t._v(" "),r("li",[t._v("CoffeeScript、TypeScript、JSX 等转化为原生 Javascript")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("代码语法的检查、代码风格的检查、代码的格式化、代码的高亮、代码错误提示、代码自动补全等等")])]),t._v(" "),r("ul",[r("li",[t._v("如 JSLint、JSHint 对代码错误或风格的检查，发现一些潜在的错误")]),t._v(" "),r("li",[t._v("IDE 的错误提示、格式化、高亮、自动补全等等")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[t._v("代码混淆压缩")])]),t._v(" "),r("ul",[r("li",[t._v("UglifyJS2 等")])])])])])]),t._v(" "),r("p",[r("img",{attrs:{src:v(1394),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"前话"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前话"}},[t._v("#")]),t._v(" 前话")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("webpack")]),t._v("和"),r("code",[t._v("Lint")]),t._v("等很多的工具和库的核心都是通过"),r("code",[t._v("Abstract Syntax Tree")]),t._v("抽象语法树这个概念来实现对代码的检查、分析等操作的")])]),t._v(" "),r("h2",{attrs:{id:"ast遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ast遍历"}},[t._v("#")]),t._v(" AST遍历")]),t._v(" "),r("ul",[r("li",[t._v("AST是深度优先遍历")]),t._v(" "),r("li",[t._v("内部使用了 【访问者模式 Visitor】对于某个对象或者一组对象，不同的访问者，产生的结果不同，执行操作也不同")]),t._v(" "),r("li",[t._v("Visitor 的对象定义了用于 AST 中获取具体节点的方法")]),t._v(" "),r("li",[t._v("Visitor 上挂载以节点 type 命名的方法，当遍历 AST 的时候，如果匹配上 type，就会执行对应的方法")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://astexplorer.net",target:"_blank",rel:"noopener noreferrer"}},[t._v("转ast网站"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=_.exports}}]);