(window.webpackJsonp=window.webpackJsonp||[]).push([[355],{1291:function(t,a,e){t.exports=e.p+"assets/img/401.af10ab61.png"},2920:function(t,a,e){"use strict";e.r(a);var r=e(2),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"核心点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心点"}},[t._v("#")]),t._v(" 核心点")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("核心点：Object.defineProperty")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("默认vue在初始化的数据时，会给data中属性使用Object.defineProperty重新定义所有属性，当页面获取、设置属性的时，会增加一层拦截，在拦截的时候可以有其他的逻辑（其实就叫依赖收集，收集当前组件的watcher）。如果属性发生变化，则会通知相关依赖进行更新操作。")])])])]),t._v(" "),r("h2",{attrs:{id:"具体实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#具体实现"}},[t._v("#")]),t._v(" 具体实现")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("在Vue初始化的时候，会调用initData方法，它会拿到当前用户传入的数据data")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("内部会有一个 Observer类，通过创建这个类的实例，调用实例的observer方法对数据data进行观测")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[t._v("如果数据（data）是对象类型（非数组）的话，则会去调用walk方法")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"4"}},[r("li",[t._v("walk方法会对数据进行循环遍历，使用defineReactive方法对数据对象中的每一个属性定义响应式变化")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"5"}},[r("li",[t._v("defineReactive方法内部其实是使用Object.defineProperty重新定义数据")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"6"}},[r("li",[t._v("如果当前对象中的属性的值还是对象的话，则会进行递归观测（即调用observer方法）\n"),r("img",{attrs:{src:e(1291),alt:""}})])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);