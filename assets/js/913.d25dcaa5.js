(window.webpackJsonp=window.webpackJsonp||[]).push([[913],{2767:function(e,o,i){"use strict";i.r(o);var v=i(2),_=Object(v.a)({},(function(){var e=this,o=e.$createElement,i=e._self._c||o;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h2",{attrs:{id:"传统身份认证"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#传统身份认证"}},[e._v("#")]),e._v(" 传统身份认证")]),e._v(" "),i("ul",[i("li",[e._v("HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。")]),e._v(" "),i("li",[e._v("解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。")]),e._v(" "),i("li",[e._v("上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。")]),e._v(" "),i("li",[e._v("这种认证中出现的问题是：")]),e._v(" "),i("li",[e._v("Seesion：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。")]),e._v(" "),i("li",[e._v("可扩展性：在服务端的内存中使用 Seesion 存储登录信息，伴随而来的是可扩展性问题。")]),e._v(" "),i("li",[e._v("CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用 Ajax 抓取另一个域的资源，就可以会出现禁止请求的情况。")]),e._v(" "),i("li",[e._v("CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，\n并且能够被利用其访问其他的网站。")]),e._v(" "),i("li",[e._v("在这些问题中，可扩展性是最突出的。因此我们有必要去寻求一种更有行之有效的方法。")])]),e._v(" "),i("h2",{attrs:{id:"token-身份认证"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#token-身份认证"}},[e._v("#")]),e._v(" Token 身份认证")]),e._v(" "),i("ul",[i("li",[e._v("使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：")]),e._v(" "),i("li",[e._v("客户端使用用户名、密码请求登录")]),e._v(" "),i("li",[e._v("服务端收到请求，去验证用户名、密码")]),e._v(" "),i("li",[e._v("验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端")]),e._v(" "),i("li",[e._v("客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里")]),e._v(" "),i("li",[e._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 Token")]),e._v(" "),i("li",[e._v("服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户\n端返回请求的数据")]),e._v(" "),i("li",[e._v("使用 Token 验证的优势：")]),e._v(" "),i("li",[e._v("无状态、可扩展")]),e._v(" "),i("li",[e._v("在客户端存储的 Tokens 是无状态的，并且能够被扩展。基于这种无状态和不存储 Session\n信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。")]),e._v(" "),i("li",[e._v("安全性")]),e._v(" "),i("li",[e._v("请求中发送 token 而不再是发送 cookie 能够防止 CSRF(跨站请求伪造)。即使在客户端使用 cookie 存储 token，cookie 也仅仅是一个存储机制而不是用于认证。不将信息存储在 Session 中，让我们少了对 session 操作。")])])])}),[],!1,null,null,null);o.default=_.exports}}]);