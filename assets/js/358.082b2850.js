(window.webpackJsonp=window.webpackJsonp||[]).push([[358],{1294:function(t,e,i){t.exports=i.p+"assets/img/404.165153d8.png"},2925:function(t,e,i){"use strict";i.r(e);var s=i(2),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_42072086/article/details/106987202?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167539784116800213062148%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=167539784116800213062148&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-106987202-null-null.blog_rank_default&utm_term=nextTick%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&spm=1018.2226.3001.4450",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"什么是nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是nexttick"}},[t._v("#")]),t._v(" 什么是nextTick")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("nextTick就是一个异步方法。nextTick 方法主要是使用了宏任务和微任务（事件循环机制），定义了一个异步方法，多次调用 nextTick 会将方法存入 队列中，通过这个异步方法清空当前队列。 所以这个 nextTick 方法就是异步方法 。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("nextTick是将回调函数延迟在下一次dom更新数据后调用，简单的理解是：当数据更新了，在dom中渲染后，自动执行该函数。所有放在Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码；")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("使用nextTick保证当前视图渲染完成。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("promise是浏览器内部自己实现的一个微任务，内部使用的不是setTimeout，详细请看面试题中的promise总结。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("nextTick中定义的三个重要变量：")])]),t._v(" "),s("ul",[s("li",[t._v("(1).callbacks：用来存储所有需要执行的回调函数")]),t._v(" "),s("li",[t._v("(2).pending：用来标志是否正在执行回调函数")]),t._v(" "),s("li",[t._v("(3).timerFunc：用来触发执行回调函数")])])])]),t._v(" "),s("h2",{attrs:{id:"nexttick的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexttick的使用场景"}},[t._v("#")]),t._v(" nextTick的使用场景")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。")])])])]),t._v(" "),s("h2",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("ul",[s("li",[t._v("当调用nextTick方法时会传入两个参数，回调函数和执行回调函数的上下文环境，如果没有提供回调函数，那么将返回promise对象。")]),t._v(" "),s("li",[t._v("首先将拿到的回调函数存放到数组中，判断是否正在执行回调函数，如果当前没有在pending的时候，就会执行timeFunc，多次执行nextTick只会执行一次timerFunc，timeFunc其实就是执行异步的方法，在timeFunc方法中选择一个异步方法（首先判断是否支持promise，如果支持就将flushCallbacks放在promise中异步执行，并且标记使用微任务。")]),t._v(" "),s("li",[t._v("如果不支持promise就看是否支持MutationObserver方法，如果支持就new了一个MutationObserver类，创建一个文本节点进行监听，当数据发生变化了就会异步执行flushCallbacks方法。如果以上两个都不支持就看是否支持setImmediate方法，如果支持setImmediate 就去异步执行flushCallbacks方法。如果以上三种方法都不支持，就使用setTimeout），然后异步去执行flushCallbacks方法，flushCallbacks中就是将传递的函数依次执行。")])]),t._v(" "),s("h2",{attrs:{id:"原理-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[s("img",{attrs:{src:i(1294),alt:""}})])])}),[],!1,null,null,null);e.default=a.exports}}]);