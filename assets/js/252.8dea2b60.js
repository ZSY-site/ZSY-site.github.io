(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{1467:function(t,a,s){t.exports=s.p+"assets/img/1.c65c2dfb.png"},1468:function(t,a,s){t.exports=s.p+"assets/img/2.c1245a01.png"},3319:function(t,a,s){"use strict";s.r(a);var r=s(2),l=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"什么是微前端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是微前端"}},[t._v("#")]),t._v(" 什么是微前端")]),t._v(" "),r("p",[t._v("微前端是一种软件架构，可以将前端应用拆解成一些更小的能够独立开发部署的微型应用，然后再将这些微应用进行组合使其成为整体应用的架构模式。")]),t._v(" "),r("p",[t._v("微前端架构类似于组件架构，但不同的是，组件不能独立构建和发布，但是微前端中的应用是可以的。")]),t._v(" "),r("p",[t._v("微前端架构与框架无关，每个微应用都可以使用不同的框架。")]),t._v(" "),r("p",[r("img",{attrs:{src:s(1467),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"微前端的价值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微前端的价值"}},[t._v("#")]),t._v(" 微前端的价值")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("增量迁移\n迁移是一项非常耗时且艰难的任务，比如有一个管理系统使用 AngularJS 开发维护已经有三年时间，但是随时间的推移和团队成员的变更，无论从开发成本还是用人需求上，AngularJS 已经不能满足要求，于是团队想要更新技术栈，想在其他框架中实现新的需求，但是现有项目怎么办？直接迁移是不可能的，在新的框架中完全重写也不太现实。")])])])]),t._v(" "),r("p",[t._v("使用微前端架构就可以解决问题，在保留原有项目的同时，可以完全使用新的框架开发新的需求，\n然后再使用微前端架构将旧的项目和新的项目进行整合。这样既可以使产品得到更好的用户体验，\n也可以使团队成员在技术上得到进步，产品开发成本也降到的最低。")]),t._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("独立发布\n在目前的单页应用架构中，使用组件构建用户界面，应用中的每个组件或功能开发完成或者bug修复完成后，每次都需要对整个产品重新进行构建和发布，任务耗时操作上也比较繁琐。")])])])]),t._v(" "),r("p",[t._v("在使用了微前端架构后，可以将不能的功能模块拆分成独立的应用，此时功能模块就可以单独构建\n单独发布了，构建时间也会变得非常快，应用发布后不需要更改其他内容应用就会自动更新，这意\n味着你可以进行频繁的构建发布操作了。")]),t._v(" "),r("ul",[r("li",[r("ol",{attrs:{start:"3"}},[r("li",[t._v("允许单个团队做出技术决策\n因为微前端构架与框架无关，当一个应用由多个团队进行开发时，每个团队都可以使用自己擅长的技术栈进行开发，也就是它允许适当的让团队决策使用哪种技术，从而使团队协作变得不再僵硬。")])])])]),t._v(" "),r("p",[r("img",{attrs:{src:s(1468),alt:""}})]),t._v(" "),r("p",[t._v("微前端的使用场景：")]),t._v(" "),r("ol",[r("li",[t._v("拆分巨型应用，使应用变得更加可维护")]),t._v(" "),r("li",[t._v("兼容历史应用，实现增量开发")])]),t._v(" "),r("h2",{attrs:{id:"如何实现微前端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何实现微前端"}},[t._v("#")]),t._v(" 如何实现微前端")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("多个微应用如何进行组合 ?\n在微前端架构中，除了存在多个微应用以外，还存在一个容器应用，每个微应用都需要被注册到容\n器应用中。\n微前端中的每个应用在浏览器中都是一个独立的 JavaScript 模块，通过模块化的方式被容器应用启\n动和运行。\n使用模块化的方式运行应用可以防止不同的微应用在同时运行时发生冲突。")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("在微应用中如何实现路由 ？\n在微前端架构中，当路由发生变化时，容器应用首先会拦截路由的变化，根据路由匹配微前端应\n用，当匹配到微应用以后，再启动微应用路由，匹配具体的页面组件。")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[t._v("微应用与微应用之间如何实现状态共享 ?\n在微应用中可以通过发布订阅模式实现状态共享，比如使用 RxJS。")])])])]),t._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[t._v("微应用与微应用之间如何实现框架和库的共享？\n通过 import-map 和 webpack 中的 externals 属性。")])])])}),[],!1,null,null,null);a.default=l.exports}}]);