(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{1623:function(s,t,a){s.exports=a.p+"assets/img/33.d9f36673.png"},1624:function(s,t,a){s.exports=a.p+"assets/img/34.e867819f.png"},1625:function(s,t,a){s.exports=a.p+"assets/img/36.b14bc6ef.png"},1626:function(s,t,a){s.exports=a.p+"assets/img/35.4ed4b33b.png"},1627:function(s,t,a){s.exports=a.p+"assets/img/37.730ad021.png"},1628:function(s,t,a){s.exports=a.p+"assets/img/38.34a88626.png"},1629:function(s,t,a){s.exports=a.p+"assets/img/39.87318386.png"},1630:function(s,t,a){s.exports=a.p+"assets/img/40.110657a0.png"},3395:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"面试题汇总"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面试题汇总"}},[s._v("#")]),s._v(" 面试题汇总")]),s._v(" "),n("h3",{attrs:{id:"说一下垃圾回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说一下垃圾回收机制"}},[s._v("#")]),s._v(" 说一下垃圾回收机制")]),s._v(" "),n("ul",[n("li",[s._v("是什么？\n"),n("ul",[n("li",[s._v("程序的运行需要内存，只要程序要求，操作系统就必须提供内存")]),s._v(" "),n("li",[s._v("JS使用自动内存管理，也就是无须我们程序员手动分配和释放内存，而是JS引擎内部帮我们完成的，这就称为 垃圾回收机制(garbage collector)。")])])]),s._v(" "),n("li",[s._v("能干什么？干的怎么样？\n"),n("ul",[n("li",[s._v("在垃圾回收过程中，就涉及到一些算法策略，最常见的有如下两个：")]),s._v(" "),n("li",[n("ol",[n("li",[s._v("标记清除算法(mark-sweep)（目前大多数的浏览器的JS引擎都在采用标记清除算法，只不过各大浏览器厂商还此算法进行了优化加工）：垃圾回收器会先给内存中所有的变量都标记为0，假设它们都为垃圾对象。然后从根对象开始遍历，把不是垃圾的节点改为1，随后清除所有标记为0的垃圾对象，销毁并回收它们的内存空间。最后再把所有内存中的对象再标记为0，等待下一轮垃圾回收")])]),s._v(" "),n("ul",[n("li",[s._v("优点：实现起来简单，只有两个情况，打标记和不打标记")]),s._v(" "),n("li",[s._v("缺点：清除后会出现内存不连续的情况，这种内存碎片会对后续的内存分配产生影响")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("引用计数算法：是根据对象是否有被引用，如果没有引用指向某个对象，那么这个对象就会被垃圾回收")])]),s._v(" "),n("ul",[n("li",[s._v("优点: 一旦某个对象的引用为0的时候，就会被立即回收。而标记清除法需要每隔一段时间就去遍历堆中的活动对象和非活动对象，从而进行垃圾回收")]),s._v(" "),n("li",[s._v("缺点：需要使用一个计数器来计数，这个计数器会占用一定的内存")])])])])])]),s._v(" "),n("h2",{attrs:{id:"nodejs中的内存管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs中的内存管理"}},[s._v("#")]),s._v(" nodejs中的内存管理")]),s._v(" "),n("ul",[n("li",[s._v("一开始js只能跑在网页端，网页端的内存泄露其实影响不是很大，首先网页的东西就不多，而且每个网页都是互相独立的。")]),s._v(" "),n("li",[s._v("有了node之后，对于持续运行的服务进程Node服务器端程序，必须及时释放不再用到的内存。否则，内存越来越高，轻则影响系统性能，重则导致进奔溃")]),s._v(" "),n("li",[s._v("如果不再用到的内存没有及时释放，就叫做内存泄露")])]),s._v(" "),n("h2",{attrs:{id:"v8的内存管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v8的内存管理"}},[s._v("#")]),s._v(" V8的内存管理")]),s._v(" "),n("h3",{attrs:{id:"v8的内存限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v8的内存限制"}},[s._v("#")]),s._v(" V8的内存限制")]),s._v(" "),n("ul",[n("li",[s._v("在64位操作系统可以使用1.4G内存")]),s._v(" "),n("li",[s._v("在32位操作系统中可以使用0.7G内存")])]),s._v(" "),n("h3",{attrs:{id:"v8内存管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v8内存管理"}},[s._v("#")]),s._v(" V8内存管理")]),s._v(" "),n("ul",[n("li",[s._v("JS对象都是通过V8进行分配管理内存的")]),s._v(" "),n("li",[s._v("process.memoryUsage 返回一个对象，包含了Node进程的内存占用信息。")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("memoryUsage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 输出：\n{\n  rss: 26,894,336,    总占用是 26M\n  heapTotal: 4,931,584,  4.9M\n  heapUsed: 4,080,088,  4M\n  external: 309,830,   300K\n  arrayBuffers: 11,158\n}\n */")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("img",{attrs:{src:a(1623),alt:""}})]),s._v(" "),n("ul",[n("li",[s._v("rss(resident set size): 所有内存占用，包括指令区和堆栈。上图的绿色包含了全部东西，是当前进程所需要的总内存。")]),s._v(" "),n("li",[s._v("Stack: 栈，存放一些本地变量和指针。比如【var a = { } 】，那么这个变量a就在栈里，这个对象就是在堆里。")]),s._v(" "),n("li",[s._v('heapTotal: 总的 "堆" 占用的内存，包括用到的和没用到的，存放一些对象啊，函数定义啊。')]),s._v(" "),n("li",[s._v("heapUsed：用到的堆的部分。【判断内存泄露，以 heapUsed 字段为准】")]),s._v(" "),n("li",[s._v("external: V8引擎内部的C++对象占用的内存")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1624),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"为何限制内存大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为何限制内存大小"}},[s._v("#")]),s._v(" 为何限制内存大小")]),s._v(" "),n("ul",[n("li",[s._v("是因为V8的垃圾收集工作原理导致的 1.4G 内存完成一次垃圾收集需要1秒以上")]),s._v(" "),n("li",[s._v("当进行垃圾收集的时候，整个程序会暂停，这个暂停时间称为 Stop The World，在这个期间，应用程序的性能和响应能力都会下降。")])]),s._v(" "),n("h3",{attrs:{id:"如何打开内存限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何打开内存限制"}},[s._v("#")]),s._v(" 如何打开内存限制")]),s._v(" "),n("ul",[n("li",[s._v("一旦初始化成功，生效后不能再修改")]),s._v(" "),n("li",[s._v("-max-new-space-size, 最大new space 大小，执行 scavenge 回收，默认是 16M , 单位是 KB")]),s._v(" "),n("li",[s._v("-max-old-space-size, 最大old space 大小，执行 MarkSweep 回收，默认是 1G , 单位是 MB")])]),s._v(" "),n("h2",{attrs:{id:"引用计数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[s._v("#")]),s._v(" 引用计数")]),s._v(" "),n("ul",[n("li",[s._v("语言引擎有一张引用表，保存了内存里面所有的资源的引用次数")]),s._v(" "),n("li",[s._v("如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。")])]),s._v(" "),n("blockquote",[n("p",[s._v("从 GC Root 出发，GC Root引用了 ObjA、ObjB、ObjC和...。 如果没有引用到 ObjF和ObjD和ObjE, 因此它们三会被回收掉。\n"),n("img",{attrs:{src:a(1625),alt:""}})])]),s._v(" "),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("body")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),n("span",{pre:!0,attrs:{class:"token script"}},[n("span",{pre:!0,attrs:{class:"token language-javascript"}},[s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'peiqi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当有变量引用该实例对象时，那么它的引用计数就是1，没有变量引用的时候，那么引用计数就是0")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'peiqi1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3秒后，p1指向了null，那么其原来指向的那个对象就会被垃圾回收。那么3秒后，再Take SnapShot(再拍一次快照)，对应的实例就会减少一个")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      p2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  ")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("body")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- \n    1. 到浏览器中 Memory\n    2. 点击 Take SnapShot （拍快照）\n    3. 然后在 Class Filter 中输入: Person\n    4. distance表示到 GC Root 的距离。x2 表示有两个实例\n --\x3e")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("body")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),n("span",{pre:!0,attrs:{class:"token script"}},[n("span",{pre:!0,attrs:{class:"token language-javascript"}},[s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Perosn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" set "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Perosn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'peiqi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// p1引用了该实例对象，那么该实例对象的引用计数就是1")]),s._v("\n    set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当添加到set中，那么该set也引用了该实例对象，那么实例对象的引用计数就变为2")]),s._v("\n    p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// p1不引用那个实例对象了，那么那个实例对象的引用计数就减1，即变为1。 ")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 可以去浏览器拍快照看看，老师演示的实例对象还在\n   * 不过我看的好像已经不在了\n   */")]),s._v(" \n  ")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("body")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h2",{attrs:{id:"v8的垃圾回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v8的垃圾回收机制"}},[s._v("#")]),s._v(" V8的垃圾回收机制")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("V8对GC的优化：上面我们说到大多数浏览器的JS引擎都是基于标记清除算法的，当然V8也是，并且也做了一些优化。")])]),s._v(" "),n("li",[n("p",[s._v("V8是基于分代的垃圾回收，不同的代，垃圾回收机制也不同。")])]),s._v(" "),n("li",[n("p",[s._v("按存活的时间分为新生代和老生代")])]),s._v(" "),n("li",[n("p",[s._v("年龄小的是新生代，由From区域和To区域 两个区域组成")]),s._v(" "),n("ul",[n("li",[s._v("在64位系统里，新生代内存是 32M，From区域和To区域各占用16M")]),s._v(" "),n("li",[s._v("在32位系统里，新生代内存是 16M，From区域和To区域各占用8M")])])]),s._v(" "),n("li",[n("p",[s._v("年龄大的是老生代，默认情况如下：")]),s._v(" "),n("ul",[n("li",[s._v("64位系统老生代内存是 1400M")]),s._v(" "),n("li",[s._v("322位系统老生代内存是 700M")])])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1626),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"新生代垃圾回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新生代垃圾回收"}},[s._v("#")]),s._v(" 新生代垃圾回收")]),s._v(" "),n("ul",[n("li",[s._v("新生代区域一分为二，每个16M，一个使用中，一个空闲中")]),s._v(" "),n("li",[s._v("开始垃圾回收的时候，会检查FROM区域中的存活对象，如果还活着，则拷贝到TO空间（每次拷贝，它的年龄都会加1，当年龄大于等于5，则会被放到放到老生代区域），如果已经死了，则将它们清空，然后FROM区域和TO区域互换，此时TO区域又变为了空的那个。因此肯定有一个空间是空的。")]),s._v(" "),n("li",[s._v("新生代扫描的时候是一种广度优先的扫描策略。")]),s._v(" "),n("li",[s._v("新生代的空间小，存活对象少。因为大部分都是临时对象，用完了就被销毁。")]),s._v(" "),n("li",[s._v("当一个对象经历过多次的垃圾回收依然存活的时候，生存周期比较长的对象会被移动到老生代，这个移动过程就成为晋升或者升级\n"),n("ul",[n("li",[s._v("经过5次以上的回收还存在")]),s._v(" "),n("li",[s._v("TO的空间使用占比超过25%，或者超大对象")])])])]),s._v(" "),n("blockquote",[n("p",[s._v("scanPointer叫扫描指针。allocatePointer叫分配指针，分配指针指向待分配的空间。\n"),n("img",{attrs:{src:a(1627),alt:""}})])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1628),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"老生代垃圾回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#老生代垃圾回收"}},[s._v("#")]),s._v(" 老生代垃圾回收")]),s._v(" "),n("ul",[n("li",[s._v("老生代有两种策略：\n"),n("ul",[n("li",[n("ol",[n("li",[s._v("mark-sweep（标记清除）: 直接把死的杀掉")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("mark-compact (标记整理) : 从前往后依次扫一遍，遇到死的就把它往后移，然后把活得往左移，最后活的都在左边，死的都在右边。")])])])])]),s._v(" "),n("li",[s._v("老生代空间大，不部分都是活着的对象，GC耗时比较长")]),s._v(" "),n("li",[s._v("在GC期间无法响应，STOP-THE-WORLD")]),s._v(" "),n("li",[s._v("V8有一个优化方案，增量处理，把一个大暂停换成多个小暂停 INCREMENT-GC")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1629),alt:""}})]),s._v(" "),n("h4",{attrs:{id:"mark-sweep-标记清除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mark-sweep-标记清除"}},[s._v("#")]),s._v(" mark-sweep(标记清除)")]),s._v(" "),n("ul",[n("li",[s._v("标记活着的对象，随后清除在标记阶段没有标记的对象，只清理死亡对象")]),s._v(" "),n("li",[s._v("问题在于清除后会出现内存不连续的情况，这种内存碎片会对后续的内存分配产生影响")]),s._v(" "),n("li",[s._v("如果要分配一个大对象，碎片空间无法分配")])]),s._v(" "),n("h4",{attrs:{id:"mark-compact-标记整理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mark-compact-标记整理"}},[s._v("#")]),s._v(" mark-compact(标记整理)")]),s._v(" "),n("ul",[n("li",[s._v("标记死亡后会对对象进行整理，活着的对象向左移动，移动完成后直接清理掉边界外的内存")])]),s._v(" "),n("h4",{attrs:{id:"incremental-marking-增量标记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#incremental-marking-增量标记"}},[s._v("#")]),s._v(" incremental marking(增量标记)")]),s._v(" "),n("ul",[n("li",[s._v("以上三种回收时都需要暂停程序执行，收集完成后才能恢复，STOP-THE-WORLD 在新生代影响不大，但是老生代影响就非常大了")]),s._v(" "),n("li",[s._v("增量标记就是把标记改为了增量标记，把一口气的停顿拆分成了多个小步骤，做完一步程序运行一会儿，垃圾回收和应用程序运行交替进行，停顿时间可以减少到 1/6 左右，包括垃圾回收的占用空间。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1630),alt:""}})])])}),[],!1,null,null,null);t.default=e.exports}}]);