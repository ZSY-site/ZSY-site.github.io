(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{2184:function(e,a,t){"use strict";t.r(a);var r=t(2),l=Object(r.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"面试题汇总"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面试题汇总"}},[e._v("#")]),e._v(" 面试题汇总")]),e._v(" "),r("h3",{attrs:{id:"说一下-babel-的工作过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#说一下-babel-的工作过程"}},[e._v("#")]),e._v(" 说一下 babel 的工作过程")]),e._v(" "),r("ul",[r("li",[e._v("babel 是什么？ Babel 能够转译 "),r("code",[e._v("ECMAScript 2015+")]),e._v(" 的代码，使它在旧的浏览器或者环境中也能够运行")]),e._v(" "),r("li",[e._v("工作过程分为三个部分：\n"),r("ul",[r("li",[r("ol",[r("li",[e._v("Parse(解析)：解析的过程分为【词法解析】和【语法分析】")])]),e._v(" "),r("ul",[r("li",[e._v("词法解析：将源代码拆分为一个个的 tokens。")]),e._v(" "),r("li",[e._v("语法分析：将这些 tokens 对应上去，从而生成抽象语法树，树上有很多的 estree 节点。")])])]),e._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("Transform(转换)：把上一步得到的抽象语法树进行转换成 es5 的抽象语法树。")])])]),e._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[e._v("Generate(代码生成)：根据该 es5 的抽象语法树进而生成新的 es5 代码。")])])])])])]),e._v(" "),r("blockquote",[r("p",[e._v("比如说：code 源代码为我爱你，那么首先会经过 词法解析，拆分为 我 爱 你 三个 tokens。然后经过语法分析，分析每一个 token，比如说 【我】是人称代词，【爱】 是 动词，【你】 是人称代词，然后把它们一一对应成一个 ast 语法树。然后经过转换，比如把 es6 的 node 节点转为 es5 的代码节点，比如把 var 变为 let，把箭头函数变为普通函数。最后再生成 code 源代码。这就是 babel 的解析过程。")])]),e._v(" "),r("p",[r("img",{attrs:{src:t(620),alt:""}})]),e._v(" "),r("h3",{attrs:{id:"说一下你所知道的-babel-插件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#说一下你所知道的-babel-插件"}},[e._v("#")]),e._v(" 说一下你所知道的 babel 插件")]),e._v(" "),r("ul",[r("li",[r("ol",[r("li",[e._v("BabelPluginTransformEs2015ArrowFunctions 插件: 将箭头函数转为普通函数, 别的不管，也不会转 const 等")])])]),e._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("@babel/plugin-transform-classes 插件：将 class 类转为为普通的构造函数")])])])]),e._v(" "),r("h3",{attrs:{id:"说一下常见的-babel-内部的库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#说一下常见的-babel-内部的库"}},[e._v("#")]),e._v(" 说一下常见的 babel 内部的库")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.npmjs.com/package/@babel/core",target:"_blank",rel:"noopener noreferrer"}},[e._v("@babel/core"),r("OutboundLink")],1),e._v(" Babel 的编译器，核心 API 都在这里面，比如常见的 transform、parse，transform 方法接收 es6+代码，返回 es5 代码")]),e._v(" "),r("li",[e._v("babylon Babel 的解析器")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/babel/babel/tree/master/packages/babel-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-types"),r("OutboundLink")],1),e._v(" 用于 AST 节点的 Lodash 式工具库, 它包含了构造、验证以及变换 AST 节点的方法，对编写处理 AST 逻辑非常有用")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.npmjs.com/package/babel-traverse",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-traverse"),r("OutboundLink")],1),e._v("用于对 AST 的遍历，维护了整棵树的状态，并且负责替换、移除和添加节点")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://babeljs.io/docs/en/next/babel-types.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-types-api"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/brigand/babel-plugin-handbook/blob/master/translations/zh-Hans/README.md#asts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel 插件手册"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://babeljs.io/en/repl.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("babeljs.io"),r("OutboundLink")],1),e._v(" babel 可视化编译器")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-handbook"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://babeljs.io/docs/en/babel-types.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-types-api"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("@babel/preset-env 是 babel 预设里面包含了十几个插件，比如有可以把 let 转为 var 的插件")])]),e._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),r("ul",[r("li",[e._v("Babel 是一个转换工具，把 es6 代码转换成浏览器能识别的代码")]),e._v(" "),r("li",[e._v("Babel 默认只转换新的 javascript 语法（比如箭头函数），而不转换新的 API，比如 Iterator，Generator，Set，Maps，Proxy，Reflect，Symbol，Promise 等全局对象。以及一些在全局对象上的方法（比如 Object.assign）都不会转码。")]),e._v(" "),r("li",[e._v("比如说，ES6 在 Array 对象上新增了 Array.form 方法，Babel 就不会转码这个方法，如果想让这个方法运行，必须使用 babel—polyfill 来转换")]),e._v(" "),r("li",[e._v("官方给出 babel—polyfill 和 babel—runtime 两种解决方案来解决这种全局对象或全局对象方法不足的问题")]),e._v(" "),r("li",[e._v("babel-runtime 适合在组件和类库项目中使用，而 babel-polyfill 适合在业务项目中使用。")])])])}),[],!1,null,null,null);a.default=l.exports},620:function(e,a,t){e.exports=t.p+"assets/img/23.9a06c981.jpg"}}]);