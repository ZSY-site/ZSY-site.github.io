(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{2585:function(a,t,v){"use strict";v.r(t);var _=v(2),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h2",{attrs:{id:"什么是-mq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mq"}},[a._v("#")]),a._v(" 什么是 MQ")]),a._v(" "),_("ul",[_("li",[a._v("MQ(message queue)，从字面意思上看，本质是个队列，遵循 FIFO (先入先出)，只不过队列中存放的内容是 message 而已，还是一种跨进程的通信机制，用于上下游传递消息(比如 A 同学给 B 同学发消息，则 A 同学就是上游，B 同学就是下游)。")]),a._v(" "),_("li",[a._v("在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务")])]),a._v(" "),_("h2",{attrs:{id:"为什么要用-mq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-mq"}},[a._v("#")]),a._v(" 为什么要用 MQ")]),a._v(" "),_("ul",[_("li",[a._v("MQ 有三大功能:\n"),_("ul",[_("li",[_("ol",[_("li",[a._v("流量消峰")])])]),a._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[a._v("应用解耦")])])]),a._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[a._v("异步处理")])])])])])]),a._v(" "),_("h3",{attrs:{id:"流量消峰"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流量消峰"}},[a._v("#")]),a._v(" 流量消峰")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。")])]),a._v(" "),_("li",[_("p",[a._v("使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。")])]),a._v(" "),_("li",[_("ol",[_("li",[a._v("如图所示：一个订单系统在一秒中只能被 1 万人同时访问，如果超过一万人，则订单系统就会崩溃。")])]),a._v(" "),_("ul",[_("li",[_("img",{attrs:{src:v(837),alt:""}})])])]),a._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[a._v("如果想要拥有超过一万人在一秒中同时访问订单系统，则需要利用消息队列进行消峰, 则需要让人不直接访问订单系统，而是去访问消息队列 MQ, 然后 MQ 再去访问订单系统")])])]),a._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[a._v("在 MQ 内部可以对访问的人员进行排队，来实现消峰的目的")])]),a._v(" "),_("ul",[_("li",[_("img",{attrs:{src:v(838),alt:""}})])])])]),a._v(" "),_("h3",{attrs:{id:"应用解耦"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用解耦"}},[a._v("#")]),a._v(" 应用解耦")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。")])]),a._v(" "),_("li",[_("p",[a._v("当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。")])]),a._v(" "),_("li",[_("ol",[_("li",[a._v("如左图：")])]),a._v(" "),_("ul",[_("li",[a._v("订单系统直接去调取 支付系统、库存系统、物流系统。")]),a._v(" "),_("li",[a._v("如果 支付系统、库存系统、物流系统 中任意一个出现故障，则订单系统也会跟着故障")])])]),a._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[a._v("如右图：")])]),a._v(" "),_("ul",[_("li",[a._v("订单系统通过队列去调取 支付系统、库存系统、物流系统，那么就不会出现如上的问题了")]),a._v(" "),_("li",[a._v("因为订单系统一旦执行完成，它才会发消息给队列，消息队列会分配消息给 支付系统、库存系统、物流系统，直到这三大系统执行完成，在执行的过程中，如果任意一个系统出现问题，则消息队列会监督它继续完成，直至执行完成。")]),a._v(" "),_("li",[a._v("因此不会出现任意一个系统故障而影响整个系统崩溃。")]),a._v(" "),_("li",[a._v("这就是 应用解耦功能。")])])]),a._v(" "),_("li",[_("p",[_("img",{attrs:{src:v(839),alt:""}})])])]),a._v(" "),_("h3",{attrs:{id:"异步处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异步处理"}},[a._v("#")]),a._v(" 异步处理")]),a._v(" "),_("ul",[_("li",[a._v("有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完。")]),a._v(" "),_("li",[a._v("以前一般有两种方式，A 过一段时间去调用 B 的查询 api 去问一下 B。")]),a._v(" "),_("li",[a._v("或者 A 提供一个 回调 api，B 执行完之后调用 该回调 api 通知 A 服务。")]),a._v(" "),_("li",[a._v("这两种方式都不是很优雅，因此 MQ 消息队列 可以很方便解决这个问题。")]),a._v(" "),_("li",[a._v("即 A 调用 B 服务后，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样 B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息。")]),a._v(" "),_("li",[_("img",{attrs:{src:v(840),alt:""}})])]),a._v(" "),_("h2",{attrs:{id:"mq-的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的分类"}},[a._v("#")]),a._v(" MQ 的分类")]),a._v(" "),_("h3",{attrs:{id:"activemq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#activemq"}},[a._v("#")]),a._v(" ActiveMQ")]),a._v(" "),_("ul",[_("li",[a._v("优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据 (简单地说就是不容易丢失消息)")]),a._v(" "),_("li",[a._v("缺点:官方社区现在对 ActiveMQ 5.x 维护越来越少，高吞吐量场景较少使用。")]),a._v(" "),_("li",[a._v("尚硅谷官网视频: http://www.gulixueyuan.com/course/322")])]),a._v(" "),_("h3",{attrs:{id:"kafka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[a._v("#")]),a._v(" Kafka")]),a._v(" "),_("ul",[_("li",[a._v("大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为大数据而生的消息中间件，以其百万级 TPS 的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。")]),a._v(" "),_("li",[a._v("优点: 性能卓越，单机写入 TPS 约在百万条/秒，最大的优点，就是吞吐量高。时效性 ms 级可用性非常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采用 Pull 方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方 Kafka Web 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持：功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用")]),a._v(" "),_("li",[a._v("缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新较慢；")])]),a._v(" "),_("h3",{attrs:{id:"rocketmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq"}},[a._v("#")]),a._v(" RocketMQ")]),a._v(" "),_("ul",[_("li",[a._v("RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。")]),a._v(" "),_("li",[a._v("优点:单机吞吐量十万级,可用性非常高，分布式架构,消息可以做到 0 丢失,MQ 功能较为完善，还是分布式的，扩展性好,支持 10 亿级别的消息堆积，不会因为堆积导致性能下降,源码是 java 我们可以自己阅读源码，定制自己公司的 MQ")]),a._v(" "),_("li",[a._v("缺点：支持的客户端语言不多，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在 MQ 核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码")])]),a._v(" "),_("h3",{attrs:{id:"rabbitmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[a._v("#")]),a._v(" RabbitMQ")]),a._v(" "),_("ul",[_("li",[a._v("2007 年发布，是一个在 AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。")]),a._v(" "),_("li",[a._v("优点:由于 erlang 语言的高并发特性，性能较好；吞吐量到万级，MQ 功能比较完备,健壮、稳定、易用、跨平台、支持多种语言 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用,社区活跃度高；更新频率相当高")]),a._v(" "),_("li",[a._v("缺点：商业版需要收费,学习成本较高")])]),a._v(" "),_("h2",{attrs:{id:"mq-的选择"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的选择"}},[a._v("#")]),a._v(" MQ 的选择")]),a._v(" "),_("h3",{attrs:{id:"kafka-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-2"}},[a._v("#")]),a._v(" Kafka")]),a._v(" "),_("ul",[_("li",[a._v("Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用，如果有日志采集功能，肯定是首选 kafka 了。")]),a._v(" "),_("li",[a._v("尚硅谷官网 kafka 视频连接 http://www.gulixueyuan.com/course/330/tasks")])]),a._v(" "),_("h3",{attrs:{id:"rocketmq-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-2"}},[a._v("#")]),a._v(" RocketMQ")]),a._v(" "),_("ul",[_("li",[a._v("天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。")])]),a._v(" "),_("h3",{attrs:{id:"rabbitmq-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq-2"}},[a._v("#")]),a._v(" RabbitMQ")]),a._v(" "),_("ul",[_("li",[a._v("结合 erlang 语言本身的并发优势，性能好时效性微秒级，社区活跃度也比较高，管理界面用起来十分方便，如果你的数据量没有那么大，中小型公司优先选择功能比较完备的 RabbitMQ。")])])])}),[],!1,null,null,null);t.default=s.exports},837:function(a,t,v){a.exports=v.p+"assets/img/3.9dba9f5d.png"},838:function(a,t,v){a.exports=v.p+"assets/img/4.1e38ab5c.png"},839:function(a,t,v){a.exports=v.p+"assets/img/1.057005e0.png"},840:function(a,t,v){a.exports=v.p+"assets/img/2.bc09eee0.png"}}]);