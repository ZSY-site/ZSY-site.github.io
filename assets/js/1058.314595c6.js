(window.webpackJsonp=window.webpackJsonp||[]).push([[1058],{2935:function(t,e,r){"use strict";r.r(e);var l=r(2),a=Object(l.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"面试题汇总"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面试题汇总"}},[t._v("#")]),t._v(" 面试题汇总")]),t._v(" "),r("h3",{attrs:{id:"说一下vue中的计算属性和侦听器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#说一下vue中的计算属性和侦听器"}},[t._v("#")]),t._v(" 说一下Vue中的计算属性和侦听器")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/itcast_cs/article/details/102802310",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("p",[t._v("计算属性：")]),t._v(" "),r("ul",[r("li",[t._v("是什么？\n"),r("ul",[r("li",[t._v("在 computed 对象中定义计算属性的方法，然后在页面中通多 "+t._s(t.方法名)+" 显示计算的结果。可以在计算属性中设置 getter 和  setter，初始化显示的时候会第一次执行 以及 后续访问属性的时候就会调用 getter，设置属性的时候就会调用 setter")])])]),t._v(" "),r("li",[t._v("能干什么？干的怎么样?\n"),r("ul",[r("li",[t._v("对于需要经过复杂逻辑计算的数据，就可以使用计算属性")]),t._v(" "),r("li",[t._v("计算属性有缓存功能，就是如果计算数据数据的依赖数据没有改变，那么多次访问该计算属性，则会返回之前的计算结果，而不必再执行函数重新计算")])])])])]),t._v(" "),r("li",[r("p",[t._v("侦听器：")]),t._v(" "),r("ul",[r("li",[t._v("是什么？\n"),r("ul",[r("li",[t._v("通过通过vm对象的$watch()或watch配置来监视指定的属性。当属性变化时, 回调函数自动调用, 在函数内部进行计算")])])])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);