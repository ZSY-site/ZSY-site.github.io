(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{2206:function(t,a,e){"use strict";e.r(a);var s=e(2),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"什么是dva"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是dva"}},[t._v("#")]),t._v(" 什么是dva")]),t._v(" "),s("ul",[s("li",[t._v("基于 redux、redux-saga 和 react-router 的轻量级前端框架。(Inspired by elm and choo)")]),t._v(" "),s("li",[t._v("dva的逻辑很简单, 也比较成熟了")]),t._v(" "),s("li",[t._v("dva是基于react+redux最佳实践上实现的封装方案，简化了redux和redux-saga使用上的诸多繁琐操作")])]),t._v(" "),s("h2",{attrs:{id:"dva的数据流向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dva的数据流向"}},[t._v("#")]),t._v(" dva的数据流向")]),t._v(" "),s("ul",[s("li",[t._v("数据的改变发生通常是通过：\n"),s("ul",[s("li",[t._v("用户交互行为（用户点击按钮等）")]),t._v(" "),s("li",[t._v("浏览器行为（如路由跳转等）触发的")])])]),t._v(" "),s("li",[t._v("当此类行为会改变数据的时候可以通过 dispatch 发起一个 action，如果是同步行为会直接通过 Reducers 改变 State ，如果是异步行为（副作用）会先触发 Effects 然后流向 Reducers 最终改变 State")])]),t._v(" "),s("blockquote",[s("p",[t._v("客户端改变路由地址, 就会渲染对应的路由组件, 在路由组件内部会派发action, action会给到Model(model是dva特有的), 订阅(subscription) 也可以派发action. action给了Model中的Reducer或者Effect, 进而修改state. 改变完state后就会去刷新组件\n"),s("img",{attrs:{src:e(631),alt:""}})])])])}),[],!1,null,null,null);a.default=r.exports},631:function(t,a,e){t.exports=e.p+"assets/img/1.bce2b927.png"}}]);