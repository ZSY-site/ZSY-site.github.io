(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{2175:function(t,s,a){"use strict";a.r(s);var v=a(2),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"前话"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前话"}},[t._v("#")]),t._v(" 前话")]),t._v(" "),v("blockquote",[v("p",[t._v("假如要开发如下的应用，下面看看单体服务和微服务层面来谈谈\n"),v("img",{attrs:{src:a(612),alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"单体服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单体服务"}},[t._v("#")]),t._v(" 单体服务")]),t._v(" "),v("ul",[v("li",[t._v("单体服务是指一个独立的应用程序，包含了所有的功能和业务逻辑。这种架构方式在小型应用程序中很常见")]),t._v(" "),v("li",[t._v("随着应用程序的功能越来越多，代码库也会越来越大，维护起来也会变得更加困难。此外，单体服务的整体复杂度也会增加，这可能导致软件开发周期变长，质量下降，并且系统的扩展性也会受到限制")]),t._v(" "),v("li",[v("img",{attrs:{src:a(613),alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"微服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[t._v("#")]),t._v(" 微服务")]),t._v(" "),v("ul",[v("li",[t._v("为了应对这些问题，许多公司开始使用微服务架构。微服务是指将一个大型应用程序拆分成若干个小型服务，每个服务负责执行特定的任务。这种架构方式可以帮助公司更快地开发和部署新功能，并提高系统的可扩展性和可维护性")]),t._v(" "),v("li",[t._v("这种方式会有以下问题:\n"),v("ul",[v("li",[v("ol",[v("li",[t._v("域名开销增加")])])]),t._v(" "),v("li",[v("ol",{attrs:{start:"2"}},[v("li",[t._v("内部服务器暴露在公网，有安全隐患")])])]),t._v(" "),v("li",[v("ol",{attrs:{start:"3"}},[v("li",[t._v("各个端有大量的个性化需求")])]),t._v(" "),v("ul",[v("li",[t._v("3.1 数据聚合: 某些功能可能需要调用多个微服务进行组合")]),t._v(" "),v("li",[t._v("3.2 数据裁剪: 后端服务返回的数据可能需要过滤掉一些敏感数据")]),t._v(" "),v("li",[t._v("3.3 数据适配: 后端返回的数据可能需要针对不同端进行数据结构的适配，后端返回 XML，但前端需要 JSON")]),t._v(" "),v("li",[t._v("3.4 数据鉴权: 不同的客户端有不同的权限要求")])])])])]),t._v(" "),v("li",[v("img",{attrs:{src:a(614),alt:""}})]),t._v(" "),v("li",[t._v("为了解决上述的问题，就产生了 BFF 架构")])]),t._v(" "),v("h2",{attrs:{id:"bff"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bff"}},[t._v("#")]),t._v(" BFF")]),t._v(" "),v("ul",[v("li",[t._v("BFF 是 Backend for Frontend 的缩写，指的是专门为前端应用设计的后端服务")]),t._v(" "),v("li",[t._v("主要用来为各个端提供代理数据聚合、裁剪、适配和鉴权服务，方便各个端接入后端服务")]),t._v(" "),v("li",[t._v("BFF 可以把前端和微服务进行解耦，各自可以独立演进")]),t._v(" "),v("li",[v("img",{attrs:{src:a(615),alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"网关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网关"}},[t._v("#")]),t._v(" 网关")]),t._v(" "),v("ul",[v("li",[t._v("API 网关是一种用于在应用程序和 API 之间提供安全访问的中间层")]),t._v(" "),v("li",[t._v("API 网关还可以用于监控 API 调用，路由请求，以及在请求和响应之间添加附加功能（例如身份验证，缓存，数据转换，压缩、流量控制、限流熔断、防爬虫等）")]),t._v(" "),v("li",[t._v("网关和 BFF 可能合二为一")]),t._v(" "),v("li",[v("img",{attrs:{src:a(616),alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"集群化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群化"}},[t._v("#")]),t._v(" 集群化")]),t._v(" "),v("ul",[v("li",[t._v("单点服务器可能会存在以下几个问题：\n"),v("ul",[v("li",[t._v("单点故障：单点服务器只有一台，如果这台服务器出现故障，整个系统都会停止工作，这会导致服务中断")]),t._v(" "),v("li",[t._v("计算能力有限：单点服务器的计算能力是有限的，无法应对大规模的计算需求")]),t._v(" "),v("li",[t._v("可扩展性差：单点服务器的扩展能力有限，如果想要提升计算能力，就必须改造或者替换现有的服务器")])])]),t._v(" "),v("li",[t._v("这些问题可以通过采用服务器集群的方式来解决")]),t._v(" "),v("li",[v("img",{attrs:{src:a(617),alt:""}})])])])}),[],!1,null,null,null);s.default=_.exports},612:function(t,s,a){t.exports=a.p+"assets/img/1.903bdf3c.png"},613:function(t,s,a){t.exports=a.p+"assets/img/2.5f627db7.jpg"},614:function(t,s,a){t.exports=a.p+"assets/img/3.b2f78ee1.png"},615:function(t,s,a){t.exports=a.p+"assets/img/4.56321316.jpg"},616:function(t,s,a){t.exports=a.p+"assets/img/5.77d8779d.jpg"},617:function(t,s,a){t.exports=a.p+"assets/img/6.4a26d820.jpg"}}]);