(window.webpackJsonp=window.webpackJsonp||[]).push([[307],{2408:function(e,r,t){"use strict";t.r(r);var o=t(2),n=Object(o.a)({},(function(){var e=this.$createElement,r=this._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[r("p",[r("img",{attrs:{src:t(793),alt:""}})]),this._v(" "),r("p",[this._v("（1）Producer：消息生产者，就是向 Kafka broker 发消息的客户端。\n（2）Consumer：消息消费者，向 Kafka broker 取消息的客户端。\n（3）Consumer Group（CG）：消费者组，由多个 consumer 组成。消费者组内每个消\n费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不\n影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。\n（4）Broker：一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个\nbroker 可以容纳多个 topic。\n（5）Topic：可以理解为一个队列，生产者和消费者面向的都是一个 topic。\n（6）Partition：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服\n务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。\n（7）Replica：副本。一个 topic 的每个分区都有若干个副本，一个 Leader 和若干个\nFollower。\n（8）Leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数\n据的对象都是 Leader。\n（9）Follower：每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和\nLeader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader。")])])}),[],!1,null,null,null);r.default=n.exports},793:function(e,r,t){e.exports=t.p+"assets/img/7.78d5be34.png"}}]);