(window.webpackJsonp=window.webpackJsonp||[]).push([[333],{2671:function(t,e,i){"use strict";i.r(e);var a=i(2),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"diff策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff策略"}},[t._v("#")]),t._v(" diff策略")]),t._v(" "),a("ul",[a("li",[t._v("DOM节点跨节点层级移动可以忽略")]),t._v(" "),a("li",[t._v("相同类型的组件生成相似的结构，不同类型的组件生成不同的结构")]),t._v(" "),a("li",[t._v("对于同一层次的子节点可以通过唯一的key进行区分")])]),t._v(" "),a("h2",{attrs:{id:"tree-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-diff"}},[t._v("#")]),t._v(" tree diff")]),t._v(" "),a("ul",[a("li",[t._v("对树进行分层比较，两棵树只会对同一层次节点进行比较")]),t._v(" "),a("li",[t._v("当出现跨层级移动时，并不会出现移动操作，而是直接删除重建")])]),t._v(" "),a("h2",{attrs:{id:"组件diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件diff"}},[t._v("#")]),t._v(" 组件diff")]),t._v(" "),a("ul",[a("li",[t._v("如果是同一个类型的组件，会向下继续比较子节点")]),t._v(" "),a("li",[t._v("如果类型不同，则替换组件下的所有子节点")])]),t._v(" "),a("h2",{attrs:{id:"element-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-diff"}},[t._v("#")]),t._v(" element diff")]),t._v(" "),a("ul",[a("li",[t._v("当节点处于同一层级时，React diff 提供了三种节点操作,分别为：INSERT(插入)、MOVE(移动)和 REMOVE(删除)\n"),a("ul",[a("li",[t._v("INSERT: 新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作")]),t._v(" "),a("li",[t._v("MOVE: 在老集合有新 component 类型，就需要做移动操作，可以复用以前的 DOM 节点")]),t._v(" "),a("li",[t._v("REMOVE: 老 component 不在新集合里的，也需要执行删除操作")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:i(902),alt:""}})])])}),[],!1,null,null,null);e.default=s.exports},902:function(t,e,i){t.exports=i.p+"assets/img/4.4edcace6.png"}}]);