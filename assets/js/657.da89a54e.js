(window.webpackJsonp=window.webpackJsonp||[]).push([[657],{2407:function(e,t,n){"use strict";n.r(t);var o=n(2),l=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("a",{attrs:{href:"https://github.com/BetaSu/big-react/commit/c542e19e1d53cc7d5de3a46fb61aeb556e366a41",target:"_blank",rel:"noopener noreferrer"}},[e._v("本节课代码地址"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("strong",[e._v("本节课我们将实现第三种调试方式 —— 用例调试，包括三部分内容：")])]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("实现第一个测试工具"),n("code",[e._v("test-utils")])])]),e._v(" "),n("li",[n("strong",[e._v("实现测试环境")])]),e._v(" "),n("li",[n("strong",[e._v("实现"),n("code",[e._v("ReactElement")]),e._v("用例")])])]),e._v(" "),n("p",[n("strong",[e._v("与测试相关的代码都来自"),n("code",[e._v("React")]),e._v("仓库，可以先把"),n("code",[e._v("React")]),e._v("仓库下载下来：")])]),e._v(" "),n("p",[n("strong",[n("code",[e._v("git clone git@github.com:facebook/react.git")])])]),e._v(" "),n("h2",{attrs:{id:"实现-test-utils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-test-utils"}},[e._v("#")]),e._v(" "),n("strong",[e._v("实现 test-utils")])]),e._v(" "),n("p",[n("strong",[e._v("这是用于测试的工具集，来源自"),n("a",{attrs:{href:"https://github.com/facebook/react/blob/main/packages/react-dom/src/test-utils/ReactTestUtils.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactTestUtils.js"),n("OutboundLink")],1),e._v("，特点是：使用"),n("code",[e._v("ReactDOM")]),e._v("作为宿主环境")])]),e._v(" "),n("p",[n("strong",[e._v("题外话：有没有其他测试工具？")])]),e._v(" "),n("h2",{attrs:{id:"实现测试环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现测试环境"}},[e._v("#")]),e._v(" "),n("strong",[e._v("实现测试环境")])]),e._v(" "),n("p",[n("strong",[n("code",[e._v("pnpm i -D -w jest jest-config jest-environment-jsdom")])])]),e._v(" "),n("p",[n("strong",[e._v("配置：")])]),e._v(" "),n("p",[n("strong",[n("code",[e._v("const { defaults } = require('jest-config'); module.exports = { ...defaults, rootDir: process.cwd(), modulePathIgnorePatterns: ['<rootDir>/.history'], moduleDirectories: [ // 对于 React ReactDOM 'dist/node_modules', // 对于第三方依赖 ...defaults.moduleDirectories ], testEnvironment: 'jsdom' };")])])]),e._v(" "),n("h2",{attrs:{id:"实现-reactelement-用例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-reactelement-用例"}},[e._v("#")]),e._v(" "),n("strong",[e._v("实现 ReactElement 用例")])]),e._v(" "),n("p",[n("strong",[e._v("来源自"),n("a",{attrs:{href:"https://github.com/facebook/react/blob/main/packages/react/src/__tests__/ReactElement-test.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactElement-test.js"),n("OutboundLink")],1),e._v("，用例代码在本节最后。")])]),e._v(" "),n("p",[n("strong",[e._v("为"),n("code",[e._v("jest")]),e._v("增加"),n("code",[e._v("JSX")]),e._v("解析能力，安装"),n("code",[e._v("Babel")]),e._v("：")])]),e._v(" "),n("p",[n("strong",[n("code",[e._v("pnpm i -D -w @babel/core @babel/preset-env @babel/plugin-transform-react-jsx")])])]),e._v(" "),n("p",[n("strong",[e._v("新增"),n("code",[e._v("babel.config.js")]),e._v("：")])]),e._v(" "),n("p",[n("strong",[n("code",[e._v("module.exports = { presets: ['@babel/preset-env'], plugins: [ [ '@babel/plugin-transform-react-jsx', {throwIfNamespace: false} ] ] }")])])]),e._v(" "),n("p",[n("strong",[e._v("用例代码：")])]),e._v(" "),n("p",[e._v("**"),n("code",[e._v("/**  * Copyright (c) Facebook, Inc. and its affiliates.  *  * This source code is licensed under the MIT license found in the  * LICENSE file in the root directory of this source tree.  \\*  * @emails react-core  */ 'use strict'; let React; let ReactDOM; let ReactTestUtils; describe('ReactElement', () => {   let ComponentFC;   let originalSymbol;   beforeEach(() => {     jest.resetModules();     // Delete the native Symbol if we have one to ensure we test the     // unpolyfilled environment.     originalSymbol = global.Symbol;     global.Symbol = undefined;     React = require('react');     ReactDOM = require('react-dom');     ReactTestUtils = require('react-dom/test-utils');     // NOTE: We're explicitly not using JSX here. This is intended to test     // classic JS without JSX.     ComponentFC = () => {       return React.createElement('div');     };   });   afterEach(() => {     global.Symbol = originalSymbol;   });   it('uses the fallback value when in an environment without Symbol', () => {     expect((<div />).$$typeof).toBe(0xeac7);   });   it('returns a complete element according to spec', () => {     const element = React.createElement(ComponentFC);     expect(element.type).toBe(ComponentFC);     expect(element.key).toBe(null);     expect(element.ref).toBe(null);     expect(element.props).toEqual({});   });   it('allows a string to be passed as the type', () => {     const element = React.createElement('div');     expect(element.type).toBe('div');     expect(element.key).toBe(null);     expect(element.ref).toBe(null);     expect(element.props).toEqual({});   });   it('returns an immutable element', () => {     const element = React.createElement(ComponentFC);     expect(() => (element.type = 'div')).not.toThrow();   });   it('does not reuse the original config object', () => {     const config = { foo: 1 };     const element = React.createElement(ComponentFC, config);     expect(element.props.foo).toBe(1);     config.foo = 2;     expect(element.props.foo).toBe(1);   });   it('does not fail if config has no prototype', () => {     const config = Object.create(null, { foo: { value: 1, enumerable: true } });     const element = React.createElement(ComponentFC, config);     expect(element.props.foo).toBe(1);   });   it('extracts key and ref from the config', () => {     const element = React.createElement(ComponentFC, {       key: '12',       ref: '34',       foo: '56'     });     expect(element.type).toBe(ComponentFC);     expect(element.key).toBe('12');     expect(element.ref).toBe('34');     expect(element.props).toEqual({ foo: '56' });   });   it('extracts null key and ref', () => {     const element = React.createElement(ComponentFC, {       key: null,       ref: null,       foo: '12'     });     expect(element.type).toBe(ComponentFC);     expect(element.key).toBe('null');     expect(element.ref).toBe(null);     expect(element.props).toEqual({ foo: '12' });   });   it('ignores undefined key and ref', () => {     const props = {       foo: '56',       key: undefined,       ref: undefined     };     const element = React.createElement(ComponentFC, props);     expect(element.type).toBe(ComponentFC);     expect(element.key).toBe(null);     expect(element.ref).toBe(null);     expect(element.props).toEqual({ foo: '56' });   });   it('ignores key and ref warning getters', () => {     const elementA = React.createElement('div');     const elementB = React.createElement('div', elementA.props);     expect(elementB.key).toBe(null);     expect(elementB.ref).toBe(null);   });   it('coerces the key to a string', () => {     const element = React.createElement(ComponentFC, {       key: 12,       foo: '56'     });     expect(element.type).toBe(ComponentFC);     expect(element.key).toBe('12');     expect(element.ref).toBe(null);     expect(element.props).toEqual({ foo: '56' });   });   it('merges an additional argument onto the children prop', () => {     const a = 1;     const element = React.createElement(       ComponentFC,       {         children: 'text'       },       a     );     expect(element.props.children).toBe(a);   });   it('does not override children if no rest args are provided', () => {     const element = React.createElement(ComponentFC, {       children: 'text'     });     expect(element.props.children).toBe('text');   });   it('overrides children if null is provided as an argument', () => {     const element = React.createElement(       ComponentFC,       {         children: 'text'       },       null     );     expect(element.props.children).toBe(null);   });   it('merges rest arguments onto the children prop in an array', () => {     const a = 1;     const b = 2;     const c = 3;     const element = React.createElement(ComponentFC, null, a, b, c);     expect(element.props.children).toEqual([1, 2, 3]);   });   // // NOTE: We're explicitly not using JSX here. This is intended to test   // // classic JS without JSX.   it('allows static methods to be called using the type property', () => {     function StaticMethodComponent() {       return React.createElement('div');     }     StaticMethodComponent.someStaticMethod = () => 'someReturnValue';     const element = React.createElement(StaticMethodComponent);     expect(element.type.someStaticMethod()).toBe('someReturnValue');   });   // // NOTE: We're explicitly not using JSX here. This is intended to test   // // classic JS without JSX.   it('identifies valid elements', () => {     function Component() {       return React.createElement('div');     }     expect(React.isValidElement(React.createElement('div'))).toEqual(true);     expect(React.isValidElement(React.createElement(Component))).toEqual(true);     expect(React.isValidElement(null)).toEqual(false);     expect(React.isValidElement(true)).toEqual(false);     expect(React.isValidElement({})).toEqual(false);     expect(React.isValidElement('string')).toEqual(false);     expect(React.isValidElement(Component)).toEqual(false);     expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);     const jsonElement = JSON.stringify(React.createElement('div'));     expect(React.isValidElement(JSON.parse(jsonElement))).toBe(true);   });   // // NOTE: We're explicitly not using JSX here. This is intended to test   // // classic JS without JSX.   it('is indistinguishable from a plain object', () => {     const element = React.createElement('div', { className: 'foo' });     const object = {};     expect(element.constructor).toBe(object.constructor);   });   it('does not warn for NaN props', () => {     function Test() {       return <div />;     }     const test = ReactTestUtils.renderIntoDocument(<Test value={+undefined} />);     expect(test.props.value).toBeNaN();   });   // // NOTE: We're explicitly not using JSX here. This is intended to test   // // classic JS without JSX.   it('identifies elements, but not JSON, if Symbols are supported', () => {     // Rudimentary polyfill     // Once all jest engines support Symbols natively we can swap this to test     // WITH native Symbols by default.     /_eslint-disable _/     const REACT*ELEMENT_TYPE = function () {}; // fake Symbol     const OTHER_SYMBOL = function () {}; // another fake Symbol     /\\_eslint-enable */     global.Symbol = function (name) {       return OTHER_SYMBOL;     };     global.Symbol.for = function (key) {       if (key === 'react.element') {         return REACT_ELEMENT_TYPE;       }       return OTHER_SYMBOL;     };     jest.resetModules();     React = require('react');     function Component() {       return React.createElement('div');     }     expect(React.isValidElement(React.createElement('div'))).toEqual(true);     expect(React.isValidElement(React.createElement(Component))).toEqual(true);     expect(React.isValidElement(null)).toEqual(false);     expect(React.isValidElement(true)).toEqual(false);     expect(React.isValidElement({})).toEqual(false);     expect(React.isValidElement('string')).toEqual(false);     expect(React.isValidElement(Component)).toEqual(false);     expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);     const jsonElement = JSON.stringify(React.createElement('div'));     expect(React.isValidElement(JSON.parse(jsonElement))).toBe(false);   }); });")]),e._v("**")]),e._v(" "),n("p",[n("strong",[e._v("访问 "),n("a",{attrs:{href:"https://devtool.tech",target:"_blank",rel:"noopener noreferrer"}},[e._v("DevTool"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("本工具地址: "),n("a",{attrs:{href:"http://devtool.tech/html-md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Devtool/HTML-To-Markdown"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"联系方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#联系方式"}},[e._v("#")]),e._v(" 联系方式")]),e._v(" "),n("ul",[n("li",[e._v("微信: shanyue94(山月)")]),e._v(" "),n("li",[e._v("Github: "),n("a",{attrs:{href:"https://github.com/shfshanyue",target:"_blank",rel:"noopener noreferrer"}},[e._v("shfshanyue"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("博客: "),n("a",{attrs:{href:"https://shanyue.tech",target:"_blank",rel:"noopener noreferrer"}},[e._v("shanyue.tech"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"联系方式-表格版"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#联系方式-表格版"}},[e._v("#")]),e._v(" 联系方式: 表格版")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("账号")]),e._v(" "),n("th",[e._v("地址")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("微信")]),e._v(" "),n("td",[e._v("shanyue94(山月)")])]),e._v(" "),n("tr",[n("td",[e._v("Github")]),e._v(" "),n("td",[e._v("shfshanyue")])]),e._v(" "),n("tr",[n("td",[e._v("博客")]),e._v(" "),n("td",[e._v("shanyue.tech")])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);