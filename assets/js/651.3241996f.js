(window.webpackJsonp=window.webpackJsonp||[]).push([[651],{2398:function(e,t,r){"use strict";r.r(t);var v=r(2),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[r("a",{attrs:{href:"https://github.com/BetaSu/big-react/commit/2783c639dee37139eeff9d0d7ba6133df6db9a0e",target:"_blank",rel:"noopener noreferrer"}},[e._v("本节课代码地址"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("code",[e._v("reconciler")]),e._v("是"),r("code",[e._v("React")]),e._v("核心逻辑所在的模块，中文名叫"),r("code",[e._v("协调器")]),e._v("。协调（reconcile）就是"),r("code",[e._v("diff")]),e._v("算法的意思。")]),e._v(" "),r("h2",{attrs:{id:"reconciler-有什么用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-有什么用"}},[e._v("#")]),e._v(" reconciler 有什么用？")]),e._v(" "),r("p",[r("code",[e._v("jQuery")]),e._v("工作原理（过程驱动）：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://wechatapppro-1252524126.file.myqcloud.com/appjiz2zqrn2142/image/b_u_622f2474a891b_tuQ1ZmhR/lb1kiitv03b2.png",alt:"91d0984e-6963-46d1-b91f-62687fd48f84.png",title:"91d0984e-6963-46d1-b91f-62687fd48f84.png"}})]),e._v(" "),r("p",[e._v("前端框架结构与工作原理（状态驱动）：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://wechatapppro-1252524126.file.myqcloud.com/appjiz2zqrn2142/image/b_u_622f2474a891b_tuQ1ZmhR/lb1kiitv0j3k.png",alt:"frame.png",title:"frame.png"}})]),e._v(" "),r("ul",[r("li",[e._v("消费 JSX")]),e._v(" "),r("li",[e._v("没有编译优化")]),e._v(" "),r("li",[e._v("开放通用 API 供不同宿主环境使用")])]),e._v(" "),r("h2",{attrs:{id:"核心模块消费-jsx-的过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心模块消费-jsx-的过程"}},[e._v("#")]),e._v(" 核心模块消费 JSX 的过程")]),e._v(" "),r("h3",{attrs:{id:"核心模块操作的数据结构是"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心模块操作的数据结构是"}},[e._v("#")]),e._v(" 核心模块操作的数据结构是？")]),e._v(" "),r("p",[e._v("当前已知的数据结构："),r("code",[e._v("ReactElement")]),e._v("（"),r("a",{attrs:{href:"https://babeljs.io/repl#?browsers=defaults&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=DwEwlgbgfAjATAZmAenNIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Cstage-2&prettier=false&targets=&version=7.19.5&externalPlugins=&assumptions=%7B%7D",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSX 转换 playground"),r("OutboundLink")],1),e._v("）")]),e._v(" "),r("p",[r("code",[e._v("ReactElement")]),e._v("如果作为核心模块操作的数据结构，存在的问题：")]),e._v(" "),r("ul",[r("li",[e._v("无法表达节点之间的关系")]),e._v(" "),r("li",[e._v("字段有限，不好拓展（比如：无法表达状态）")])]),e._v(" "),r("p",[e._v("所以，需要一种新的数据结构，他的特点：")]),e._v(" "),r("ul",[r("li",[e._v("介于"),r("code",[e._v("ReactElement")]),e._v("与真实 UI 节点之间")]),e._v(" "),r("li",[e._v("能够表达节点之间的关系")]),e._v(" "),r("li",[e._v("方便拓展（不仅作为数据存储单元，也能作为工作单元）")])]),e._v(" "),r("p",[e._v("这就是"),r("code",[e._v("FiberNode")]),e._v("（虚拟 DOM 在 React 中的实现）")]),e._v(" "),r("p",[e._v("当前我们了解的节点类型：")]),e._v(" "),r("ul",[r("li",[e._v("JSX")]),e._v(" "),r("li",[e._v("ReactElement")]),e._v(" "),r("li",[e._v("FiberNode")]),e._v(" "),r("li",[e._v("DOMElement")])]),e._v(" "),r("h2",{attrs:{id:"reconciler-的工作方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-的工作方式"}},[e._v("#")]),e._v(" reconciler 的工作方式")]),e._v(" "),r("p",[e._v("对于同一个节点，比较其"),r("code",[e._v("ReactElement")]),e._v("与"),r("code",[e._v("fiberNode")]),e._v("，生成"),r("code",[e._v("子fiberNode")]),e._v("。并根据比较的结果生成不同标记（插入、删除、移动......），对应不同宿主环境 API 的执行。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://wechatapppro-1252524126.file.myqcloud.com/appjiz2zqrn2142/image/b_u_622f2474a891b_tuQ1ZmhR/lb1kiitv0gin.png",alt:"33.png",title:"33.png"}})]),e._v(" "),r("p",[e._v("比如，挂载"),r("code",[e._v("<div></div>")]),e._v("：")]),e._v(" "),r("p",[r("code",[e._v('// React Element <div></div> jsx("div") // 对应fiberNode null // 生成子fiberNode // 对应标记 Placement')])]),e._v(" "),r("p",[e._v("将"),r("code",[e._v("<div></div>")]),e._v("更新为"),r("code",[e._v("<p></p>")]),e._v("：")]),e._v(" "),r("p",[r("code",[e._v("// React Element <p></p> jsx(\"p\") // 对应fiberNode FiberNode {type: 'div'} // 生成子fiberNode // 对应标记 Deletion Placement")])]),e._v(" "),r("p",[e._v("当所有"),r("code",[e._v("ReactElement")]),e._v("比较完后，会生成一棵"),r("code",[e._v("fiberNode树")]),e._v("，一共会存在两棵"),r("code",[e._v("fiberNode树")]),e._v("：")]),e._v(" "),r("ul",[r("li",[e._v("current：与视图中真实 UI 对应的"),r("code",[e._v("fiberNode树")])]),e._v(" "),r("li",[e._v("workInProgress：触发更新后，正在"),r("code",[e._v("reconciler")]),e._v("中计算的"),r("code",[e._v("fiberNode树")])])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/wwwlyj123321/article/details/126447825",target:"_blank",rel:"noopener noreferrer"}},[e._v("双缓冲技术介绍"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"jsx-消费的顺序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jsx-消费的顺序"}},[e._v("#")]),e._v(" JSX 消费的顺序")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://houbb.github.io/2020/01/23/data-struct-learn-08-dfs-bfs",target:"_blank",rel:"noopener noreferrer"}},[e._v("DFS 深度优先遍历与 BFS 广度优先遍历详解"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("以 DFS（深度优先遍历）的顺序遍历"),r("code",[e._v("ReactElement")]),e._v("，这意味着：")]),e._v(" "),r("ul",[r("li",[e._v("如果有子节点，遍历子节点")]),e._v(" "),r("li",[e._v("如果没有子节点，遍历兄弟节点 例子：")])]),e._v(" "),r("p",[r("code",[e._v("<Card> <h3>你好</h3> <p>Big-React</p> </Card>")])]),e._v(" "),r("p",[e._v("这是个递归的过程，存在递、归两个阶段：")]),e._v(" "),r("ul",[r("li",[e._v("递：对应"),r("code",[e._v("beginWork")])]),e._v(" "),r("li",[e._v("归：对应"),r("code",[e._v("completeWork")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);