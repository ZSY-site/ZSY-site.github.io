(window.webpackJsonp=window.webpackJsonp||[]).push([[648],{2397:function(e,t,r){"use strict";r.r(t);var s=r(2),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Title")]),e._v(" "),r("p",[e._v("课前须知：")]),e._v(" "),r("ul",[r("li",[e._v("为了更好的学习体验，请购课后加卡颂微信（kasong555），发送课程购买截图，拉你进专属学习群")]),e._v(" "),r("li",[e._v("参与"),r("a",{attrs:{href:"https://wj.qq.com/s2/11444184/b3e4/",target:"_blank",rel:"noopener noreferrer"}},[e._v("2 个月通关 React 挑战"),r("OutboundLink")],1),e._v("，返现金")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/BetaSu/big-react/commit/c7b95393b18fbfa535c3297fa627cab44cb0f626",target:"_blank",rel:"noopener noreferrer"}},[e._v("本节课代码地址"),r("OutboundLink")],1)])]),e._v(" "),r("h1",{attrs:{id:"第十五课-实现-noop-renderer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第十五课-实现-noop-renderer"}},[e._v("#")]),e._v(" 第十五课：实现 noop-renderer")]),e._v(" "),r("p",[e._v("到目前为止我们实现的模块：")]),e._v(" "),r("ul",[r("li",[e._v("核心模块："),r("code",[e._v("Reconciler")])]),e._v(" "),r("li",[e._v("公用方法："),r("code",[e._v("React")])]),e._v(" "),r("li",[e._v("浏览器宿主环境："),r("code",[e._v("ReactDOM")])])]),e._v(" "),r("p",[e._v("当前项目的问题：测试用例太单薄，无法照顾到项目的边界情况，但课程时长有限，无法覆盖所有用例")]),e._v(" "),r("p",[e._v("解决办法：构建成熟的"),r("code",[e._v("React")]),e._v("测试环境，实现测试工具，学员按需跑通用例")]),e._v(" "),r("p",[e._v("为了测试"),r("code",[e._v("Reconciler")]),e._v("，我们需要构建**「宿主环境无关的渲染器」**，这就是"),r("a",{attrs:{href:"https://github.com/facebook/react/tree/main/packages/react-noop-renderer",target:"_blank",rel:"noopener noreferrer"}},[e._v("react-noop-renderer"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("以下是使用"),r("code",[e._v("noop-renderer")]),e._v("的一个用例"),r("code",[e._v("packages/react-reconciler/src/__tests__/ReactEffectOrdering-test.js")]),e._v("：")]),e._v(" "),r("p",[r("code",[e._v("/** * Copyright (c) Facebook, Inc. and its affiliates. * * This source code is licensed under the MIT license found in the * LICENSE file in the root directory of this source tree. * * @emails react-core * @jest-environment node */ /* eslint-disable no-func-assign */ 'use strict'; let React; let ReactNoop; let Scheduler; let act; let useEffect; describe('ReactHooksWithNoopRenderer', () => { beforeEach(() => { jest.resetModules(); jest.useFakeTimers(); React = require('react'); act = require('jest-react').act; Scheduler = require('scheduler'); ReactNoop = require('react-noop-renderer'); useEffect = React.useEffect; }); test('passive unmounts on deletion are fired in parent -> child order', async () => { const root = ReactNoop.createRoot(); function Parent() { useEffect(() => { return () => Scheduler.unstable_yieldValue('Unmount parent'); }); return <Child />; } function Child() { useEffect(() => { return () => Scheduler.unstable_yieldValue('Unmount child'); }); return 'Child'; } await act(async () => { root.render(<Parent />); }); expect(root).toMatchRenderedOutput('Child'); await act(async () => { root.render(null); }); expect(Scheduler).toHaveYielded(['Unmount parent', 'Unmount child']); }); });")])]),e._v(" "),r("h2",{attrs:{id:"noop-renderer-的实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#noop-renderer-的实现"}},[e._v("#")]),e._v(" Noop-Renderer 的实现")]),e._v(" "),r("p",[e._v("包括两部分：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("hostConfig")])]),e._v(" "),r("li",[e._v("工厂函数（类似"),r("code",[e._v("ReactDOM")]),e._v("）")])]),e._v(" "),r("p",[e._v("在"),r("code",[e._v("ReactDOM")]),e._v("宿主环境的原生节点是"),r("code",[e._v("DOM")]),e._v("节点，在"),r("code",[e._v("Noop-Renderer")]),e._v("宿主环境包括三类节点：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("Instance")]),e._v("（"),r("code",[e._v("HostComponent")]),e._v("）")])]),e._v(" "),r("p",[r("code",[e._v("const instance = { id: instanceCounter++, type: type, children: [], parent: -1, props };")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("TextInstance")]),e._v("（"),r("code",[e._v("HostText")]),e._v("）")])]),e._v(" "),r("p",[r("code",[e._v("const textInstance = { text: content, id: instanceCounter++, parent: -1 };")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("Container")]),e._v("（"),r("code",[e._v("HostRoot")]),e._v("）")])]),e._v(" "),r("p",[r("code",[e._v("const container = { rootID: idCounter++, children: [] };")])]),e._v(" "),r("p",[e._v("对于如下组件：")]),e._v(" "),r("p",[r("code",[e._v("function App() { return ( <> <Child /> <div>hello world</div> </> ); } function Child() { return 'Child'; }")])]),e._v(" "),r("p",[e._v("经由"),r("code",[e._v("Noop-Renderer")]),e._v("渲染后得到的树状结构如下（对标"),r("code",[e._v("DOM")]),e._v("树）：")]),e._v(" "),r("p",[r("code",[e._v('{ "rootID": 0, "children": [ { "text": "Child", "id": 0, "parent": 0 }, { "id": 2, "type": "div", "children": [ { "text": "hello world", "id": 1, "parent": 2 } ], "parent": 0, "props": { "children": "hello world" } } ] }')])]),e._v(" "),r("p",[e._v("除此以外，还需实现**「以 ReactElement 的形式导出树状结构」**。")]),e._v(" "),r("h2",{attrs:{id:"完善-reconciler-测试环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完善-reconciler-测试环境"}},[e._v("#")]),e._v(" 完善 Reconciler 测试环境")]),e._v(" "),r("p",[e._v("需要思考的问题：如何在并发环境测试运行结果？比如：")]),e._v(" "),r("ul",[r("li",[e._v("如何控制异步执行的时间？使用"),r("a",{attrs:{href:"https://jestjs.io/docs/timer-mocks",target:"_blank",rel:"noopener noreferrer"}},[e._v("mock timer"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("如何记录并发情况下预期的执行顺序？")])]),e._v(" "),r("h2",{attrs:{id:"完善并发测试环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完善并发测试环境"}},[e._v("#")]),e._v(" 完善并发测试环境")]),e._v(" "),r("p",[e._v("安装并发的测试上下文环境：")]),e._v(" "),r("p",[r("code",[e._v("pnpm i -D -w jest-react")])]),e._v(" "),r("h2",{attrs:{id:"安装-matchers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装-matchers"}},[e._v("#")]),e._v(" 安装 matchers")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("reactTestMatchers.js")])])]),e._v(" "),r("p",[r("code",[e._v("'use strict'; const JestReact = require('jest-react'); const SchedulerMatchers = require('./schedulerTestMatchers'); function captureAssertion(fn) { // Trick to use a Jest matcher inside another Jest matcher. `fn` contains an // assertion; if it throws, we capture the error and return it, so the stack // trace presented to the user points to the original assertion in the // test file. try { fn(); } catch (error) { return { pass: false, message: () => error.message }; } return { pass: true }; } function assertYieldsWereCleared(Scheduler) { const actualYields = Scheduler.unstable_clearYields(); if (actualYields.length !== 0) { throw new Error( 'Log of yielded values is not empty. ' + 'Call expect(Scheduler).toHaveYielded(...) first.' ); } } function toMatchRenderedOutput(ReactNoop, expectedJSX) { if (typeof ReactNoop.getChildrenAsJSX === 'function') { const Scheduler = ReactNoop._Scheduler; assertYieldsWereCleared(Scheduler); return captureAssertion(() => { expect(ReactNoop.getChildrenAsJSX()).toEqual(expectedJSX); }); } return JestReact.unstable_toMatchRenderedOutput(ReactNoop, expectedJSX); } module.exports = { ...SchedulerMatchers, toMatchRenderedOutput };")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("schedulerTestMatchers.js")])])]),e._v(" "),r("p",[r("code",[e._v("'use strict'; function captureAssertion(fn) { // Trick to use a Jest matcher inside another Jest matcher. `fn` contains an // assertion; if it throws, we capture the error and return it, so the stack // trace presented to the user points to the original assertion in the // test file. try { fn(); } catch (error) { return { pass: false, message: () => error.message }; } return { pass: true }; } function assertYieldsWereCleared(Scheduler) { const actualYields = Scheduler.unstable_clearYields(); if (actualYields.length !== 0) { throw new Error( 'Log of yielded values is not empty. ' + 'Call expect(Scheduler).toHaveYielded(...) first.' ); } } function toFlushAndYield(Scheduler, expectedYields) { assertYieldsWereCleared(Scheduler); Scheduler.unstable_flushAllWithoutAsserting(); const actualYields = Scheduler.unstable_clearYields(); return captureAssertion(() => { expect(actualYields).toEqual(expectedYields); }); } function toFlushAndYieldThrough(Scheduler, expectedYields) { assertYieldsWereCleared(Scheduler); Scheduler.unstable_flushNumberOfYields(expectedYields.length); const actualYields = Scheduler.unstable_clearYields(); return captureAssertion(() => { expect(actualYields).toEqual(expectedYields); }); } function toFlushUntilNextPaint(Scheduler, expectedYields) { assertYieldsWereCleared(Scheduler); Scheduler.unstable_flushUntilNextPaint(); const actualYields = Scheduler.unstable_clearYields(); return captureAssertion(() => { expect(actualYields).toEqual(expectedYields); }); } function toFlushWithoutYielding(Scheduler) { return toFlushAndYield(Scheduler, []); } function toFlushExpired(Scheduler, expectedYields) { assertYieldsWereCleared(Scheduler); Scheduler.unstable_flushExpired(); const actualYields = Scheduler.unstable_clearYields(); return captureAssertion(() => { expect(actualYields).toEqual(expectedYields); }); } function toHaveYielded(Scheduler, expectedYields) { return captureAssertion(() => { const actualYields = Scheduler.unstable_clearYields(); expect(actualYields).toEqual(expectedYields); }); } function toFlushAndThrow(Scheduler, ...rest) { assertYieldsWereCleared(Scheduler); return captureAssertion(() => { expect(() => { Scheduler.unstable_flushAllWithoutAsserting(); }).toThrow(...rest); }); } module.exports = { toFlushAndYield, toFlushAndYieldThrough, toFlushUntilNextPaint, toFlushWithoutYielding, toFlushExpired, toHaveYielded, toFlushAndThrow };")])]),e._v(" "),r("h2",{attrs:{id:"更新-jest-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更新-jest-配置"}},[e._v("#")]),e._v(" 更新 jest 配置：")]),e._v(" "),r("p",[r("code",[e._v("const { defaults } = require('jest-config'); module.exports = { ...defaults, modulePathIgnorePatterns: ['<rootDir>/.history'], moduleDirectories: [ ...defaults.moduleDirectories, 'dist/node_modules' ], testEnvironment: 'jsdom', moduleNameMapper: { '^scheduler$': '<rootDir>/node_modules/scheduler/unstable_mock.js' }, fakeTimers: { enableGlobally: true, legacyFakeTimers: true }, setupFilesAfterEnv: ['./scripts/jest/setupJest.js'] };")])]),e._v(" "),r("p",[e._v("当前我们为测试做的准备")]),e._v(" "),r("ul",[r("li",[e._v("针对"),r("code",[e._v("ReactDOM")]),e._v("宿主环境："),r("code",[e._v("ReactTestUtils")])]),e._v(" "),r("li",[e._v("针对"),r("code",[e._v("Reconciler")]),e._v("的测试："),r("code",[e._v("React-Noop-Renderer")])]),e._v(" "),r("li",[e._v("针对并发环境的测试："),r("code",[e._v("jest-react")]),e._v("、"),r("code",[e._v("Scheduler")]),e._v("、"),r("code",[e._v("React-Noop-Renderer")]),e._v("配合使用")])])])}),[],!1,null,null,null);t.default=o.exports}}]);