(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{2130:function(t,s,e){"use strict";e.r(s);var r=e(2),a=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("ul",[r("li",[t._v("提供了新的断言类: org.junit.jupiter.api.Assertions 。")])]),t._v(" "),r("h2",{attrs:{id:"assertall"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#assertall"}},[t._v("#")]),t._v(" assertAll")]),t._v(" "),r("blockquote",[r("p",[t._v("每个断言都会执行，且如果出错也会给出提示。assertAll的第一个参数相当于只是起个名字。\n"),r("img",{attrs:{src:e(441),alt:""}})])]),t._v(" "),r("h2",{attrs:{id:"asserttimeoutpreemptively"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#asserttimeoutpreemptively"}},[t._v("#")]),t._v(" assertTimeoutPreemptively")]),t._v(" "),r("blockquote",[r("p",[t._v("assertTimeoutPreemptively的第一个参数是限制的超时时间\n"),r("img",{attrs:{src:e(442),alt:""}})])]),t._v(" "),r("h2",{attrs:{id:"assertthrows"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#assertthrows"}},[t._v("#")]),t._v(" assertThrows")]),t._v(" "),r("blockquote",[r("p",[t._v("如果 Lambda 表达式出错了，并且错误是 IllegalArgumentException 类型，则测试会通过\n"),r("img",{attrs:{src:e(443),alt:""}})])])])}),[],!1,null,null,null);s.default=a.exports},441:function(t,s,e){t.exports=e.p+"assets/img/12.e5943081.png"},442:function(t,s,e){t.exports=e.p+"assets/img/13.f391cf2e.png"},443:function(t,s,e){t.exports=e.p+"assets/img/14.e9c6386e.png"}}]);