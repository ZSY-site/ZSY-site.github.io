(window.webpackJsonp=window.webpackJsonp||[]).push([[1238],{3160:function(a,t,e){"use strict";e.r(t);var l=e(2),r=Object(l.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"面试题汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题汇总"}},[a._v("#")]),a._v(" 面试题汇总")]),a._v(" "),e("h3",{attrs:{id:"说一下webpack的插件机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一下webpack的插件机制"}},[a._v("#")]),a._v(" 说一下webpack的插件机制")]),a._v(" "),e("ul",[e("li",[a._v("在具体介绍 webpack 内置插件与钩子可视化工具之前，我们先来了解一下 webpack 中的插件机制。 webpack 实现插件机制的大体方式是：\n"),e("ul",[e("li",[e("ol",[e("li",[a._v("创建 - webpack 在其内部对象上创建各种钩子；")])])]),a._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[a._v("注册 - 插件将自己的方法注册到对应钩子上，交给 webpack；")])])]),a._v(" "),e("li",[e("ol",{attrs:{start:"3"}},[e("li",[a._v("调用 - webpack 编译过程中，会适时地触发相应钩子，因此也就触发了插件的方法。")])])])])]),a._v(" "),e("li",[a._v("Webpack 本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是 Tapable，webpack 中最核心的负责编译的 Compiler 和负责创建 bundle 的 Compilation 都是 Tapable 的实例")]),a._v(" "),e("li",[a._v("通过事件和注册和监听，触发 webpack 生命周期中的函数方法")])])])}),[],!1,null,null,null);t.default=r.exports}}]);