(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{2436:function(t,e,r){"use strict";r.r(e);var s=r(2),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("ul",[s("li",[t._v("如果没有中间件的运用,redux 的工作流程是这样 action -> reducer，这是相当于同步操作，由dispatch 触发action后，直接去reducer执行相应的动作")]),t._v(" "),s("li",[t._v("但是在某些比较复杂的业务逻辑中，这种同步的实现方式并不能很好的解决我们的问题。比如我们有一个这样的需求，点击按钮 -> 获取服务器数据 -> 渲染视图，因为获取服务器数据是需要异步实现，所以这时候我就需要引入中间件改变redux同步执行的流程，形成异步流程来实现我们所要的逻辑，有了中间件，redux 的工作流程就变成这样 action -> middlewares -> reducer，点击按钮就相当于dispatch 触发action，接下去获取服务器数据 middlewares 的执行，当 middlewares 成功获取到服务器就去触发reducer对应的动作，更新需要渲染视图的数据")]),t._v(" "),s("li",[t._v("中间件的机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。")])]),t._v(" "),s("p",[s("img",{attrs:{src:r(799),alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:r(800),alt:""}})])])}),[],!1,null,null,null);e.default=i.exports},799:function(t,e,r){t.exports=r.p+"assets/img/16.0f4647dd.jpg"},800:function(t,e,r){t.exports=r.p+"assets/img/17.61c78131.jpg"}}]);