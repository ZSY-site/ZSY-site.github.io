(window.webpackJsonp=window.webpackJsonp||[]).push([[656],{2410:function(e,_,v){"use strict";v.r(_);var t=v(2),o=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[v("a",{attrs:{href:"https://github.com/BetaSu/big-react/commit/c27fbabd780ba28e96adc77aacb79879a93e688b",target:"_blank",rel:"noopener noreferrer"}},[e._v("本节课代码地址"),v("OutboundLink")],1)]),e._v(" "),v("p",[v("code",[e._v("hook")]),e._v("脱离"),v("code",[e._v("FC")]),e._v("上下文，仅仅是普通函数，如何让他拥有感知上下文环境的能力？")]),e._v(" "),v("p",[e._v("比如说：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("hook")]),e._v("如何知道在另一个"),v("code",[e._v("hook")]),e._v("的上下文环境内执行？")])]),e._v(" "),v("div",{staticClass:"language-auto line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("function App() {  useEffect(() => {    // 执行useState时怎么知道处在useEffect上下文？    useState(0);  })}\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])]),v("ul",[v("li",[v("code",[e._v("hook")]),e._v("怎么知道当前是"),v("code",[e._v("mount")]),e._v("还是"),v("code",[e._v("update")]),e._v("？")])]),e._v(" "),v("p",[e._v("解决方案："),v("strong",[e._v("「在不同上下文中调用的 hook 不是同一个函数」")]),e._v("。")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://wechatapppro-1252524126.file.myqcloud.com/appjiz2zqrn2142/image/b_u_622f2474a891b_tuQ1ZmhR/lb80bl500o52.png",alt:""}})]),e._v(" "),v("p",[e._v("实现**「内部数据共享层」**时的注意事项：")]),e._v(" "),v("p",[e._v("以浏览器举例，"),v("code",[e._v("Reconciler")]),e._v(" + "),v("code",[e._v("hostConfig")]),e._v(" = "),v("code",[e._v("ReactDOM")])]),e._v(" "),v("p",[e._v("增加**「内部数据共享层」**，意味着"),v("code",[e._v("Reconciler")]),e._v("与"),v("code",[e._v("React")]),e._v("产生关联，进而意味着"),v("code",[e._v("ReactDOM")]),e._v("与"),v("code",[e._v("React")]),e._v("产生关联。")]),e._v(" "),v("p",[e._v("如果两个包**「产生关联」"),v("strong",[e._v("，在打包时需要考虑：")]),e._v("「两者的代码是打包在一起还是分开？」**")]),e._v(" "),v("p",[e._v("如果打包在一起，意味着打包后的"),v("code",[e._v("ReactDOM")]),e._v("中会包含"),v("code",[e._v("React")]),e._v("的代码，那么"),v("code",[e._v("ReactDOM")]),e._v("中会包含一个**「内部数据共享层」"),v("strong",[e._v("，"),v("code",[e._v("React")]),e._v("中也会包含一个")]),e._v("「内部数据共享层」"),v("strong",[e._v("，这两者不是同一个")]),e._v("「内部数据共享层」**。")]),e._v(" "),v("p",[e._v("而我们希望两者共享数据，所以不希望"),v("code",[e._v("ReactDOM")]),e._v("中会包含"),v("code",[e._v("React")]),e._v("的代码。")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("hook")]),e._v("如何知道自身数据保存在哪？")])]),e._v(" "),v("p",[v("code",[e._v("function App() { // 执行useState为什么能返回正确的num？ const [num] = useState(0); }")])]),e._v(" "),v("p",[e._v("答案："),v("strong",[e._v("「可以记录当前正在 render 的 FC 对应 fiberNode，在 fiberNode 中保存 hook 数据」")])]),e._v(" "),v("h2",{attrs:{id:"实现-hooks-的数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现-hooks-的数据结构"}},[e._v("#")]),e._v(" 实现 Hooks 的数据结构")]),e._v(" "),v("p",[v("code",[e._v("fiberNode")]),e._v("中可用的字段：")]),e._v(" "),v("ul",[v("li",[e._v("memoizedState")]),e._v(" "),v("li",[e._v("updateQueue")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://wechatapppro-1252524126.file.myqcloud.com/appjiz2zqrn2142/image/b_u_622f2474a891b_tuQ1ZmhR/lb80bl4z05x1.png",alt:""}})]),e._v(" "),v("p",[e._v("对于"),v("code",[e._v("FC对应的fiberNode")]),e._v("，存在两层数据：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("fiberNode.memoizedState")]),e._v("对应"),v("code",[e._v("Hooks")]),e._v("链表")]),e._v(" "),v("li",[e._v("链表中每个"),v("code",[e._v("hook")]),e._v("对应自身的数据")])]),e._v(" "),v("h2",{attrs:{id:"实现-usestate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现-usestate"}},[e._v("#")]),e._v(" 实现 useState")]),e._v(" "),v("p",[e._v("包括 2 方面工作：")]),e._v(" "),v("ol",[v("li",[e._v("实现"),v("code",[e._v("mount")]),e._v("时"),v("code",[e._v("useState")]),e._v("的实现")]),e._v(" "),v("li",[e._v("实现"),v("code",[e._v("dispatch")]),e._v("方法，并接入现有更新流程内")])])])}),[],!1,null,null,null);_.default=o.exports}}]);