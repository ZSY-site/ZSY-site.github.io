(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{1255:function(t,s,e){t.exports=e.p+"assets/img/3.2131654b.png"},1256:function(t,s,e){t.exports=e.p+"assets/img/4.a665b8c7.png"},2769:function(t,s,e){"use strict";e.r(s);var r=e(2),a=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"rest-简述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rest-简述"}},[t._v("#")]),t._v(" Rest 简述")]),t._v(" "),r("p",[t._v("REST（英文：Representational State Transfer，简称 REST）描述了一个架构样式的网络系\n统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规\n范的主要编写者之一。在目前主流的三种 Web 服务交互方案中，REST 相比于 SOAP（Simple\nObject Access protocol，简单对象访问协议）以及 XML-RPC 更加简单明了，无论是对 URL 的\n处理还是对 Payload 的编码，REST 都倾向于用更加简单轻量的方法设计和实现。值得注意的\n是 REST 并没有一个明确的标准，而更像是一种设计的风格。")]),t._v(" "),r("h2",{attrs:{id:"restful-简述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restful-简述"}},[t._v("#")]),t._v(" Restful 简述")]),t._v(" "),r("p",[t._v("对应的中文是 rest 式的;Restful web service 是一种常见的 rest 的应用,是遵守了 rest 风格\n的 web 服务;rest 式的 web 服务是一种 ROA(The Resource-Oriented Architecture)(面向资源的\n架构).")]),t._v(" "),r("h2",{attrs:{id:"restful-特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restful-特性"}},[t._v("#")]),t._v(" Restful 特性")]),t._v(" "),r("h3",{attrs:{id:"普通架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#普通架构"}},[t._v("#")]),t._v(" 普通架构")]),t._v(" "),r("p",[t._v("每次请求的接口或者地址,都在做描述，例如查询的时候用了 query，新增的时候用了\nsave。如：\nhttp://127.0.0.1/user/query/1 GET 根据用户 id 查询用户数据\nhttp://127.0.0.1/user/save POST 新增用户")]),t._v(" "),r("h3",{attrs:{id:"restful-架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restful-架构"}},[t._v("#")]),t._v(" Restful 架构")]),t._v(" "),r("p",[t._v("使用 get 请求,就是查询.使用 post 请求，就是新增的请求，意图明显，没有必要做描述, 这就是 restful。\nhttp://127.0.0.1/user/1 GET 根据用户 id 查询用户数据\nhttp://127.0.0.1/user POST 新增用户")]),t._v(" "),r("h3",{attrs:{id:"restful-操作方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restful-操作方式"}},[t._v("#")]),t._v(" Restful 操作方式")]),t._v(" "),r("p",[r("img",{attrs:{src:e(1255),alt:""}}),t._v("\n幂等性：多次访问，结果资源状态是否相同\n安全：访问是否会变更服务器资源状态")]),t._v(" "),r("h3",{attrs:{id:"响应状态码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#响应状态码"}},[t._v("#")]),t._v(" 响应状态码")]),t._v(" "),r("p",[r("img",{attrs:{src:e(1256),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"springmvc-使用-restful-实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-使用-restful-实例"}},[t._v("#")]),t._v(" SpringMVC 使用 Restful 实例")]),t._v(" "),r("p",[t._v("详见代码")])])}),[],!1,null,null,null);s.default=a.exports}}]);